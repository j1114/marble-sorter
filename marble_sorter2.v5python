{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nstir_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\noptical_sensor = Optical(Ports.PORT2)\ndoor_one_clear = Servo(brain.three_wire_port.a)\ndoor_two_plastic = Servo(brain.three_wire_port.b)\ndoor_three_metal = Servo(brain.three_wire_port.c)\nmarble_gate = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n#two main variables\n#close_state is True whenever the \"closing\" event activates. So whenever all the doors close, close_state = True\n#close_level tells the machine what marble it is sorting, which is helpful in timing for different marbles because their sorting process have different timings\nmyVariable = 0\nclosing = Event()\nclose_state = True\nclose_level = 3\n\ndef when_started1():\n    global myVariable, closing, close_state, close_level\n\n#marble_gate is the motor that controls the red wheel acts as the mechanism that only lets one marble through\n#optical_sensor is the sensor that determines which marble is which, and if a marble is in front of the first door\n\n#marble_gate's velocity is halved\n#optical_sensor's light percent is 50%\n#set LED on\n    marble_gate.set_velocity(50 ,PERCENT)\n    wait(15, MSEC)\n    closing.broadcast()\n    optical_sensor.set_light_power(50, PERCENT)\n    optical_sensor.set_light(LedStateType.ON)\n    \n#forever loop\n    while True:\n\n        #brightness value as a decimal is listed on the brain and refreshes every second\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print(optical_sensor.brightness())\n        brain.screen.print(\" \")\n        wait(1, SECONDS)\n\n        # stir_motor.spin(FORWARD, 6, VOLT)\n\n\n\n        #clear inspection\n        #if close_level is 1, if the doors are closed, and if it has been .8 seconds from when a marble was inspected\n        #dispense one marble, set close_state to False, and set timer to 0\n        if close_level == 1 and close_state == True and brain.timer.time(SECONDS) > .8:\n            marble_gate.spin_for(REVERSE, 90, DEGREES)\n            wait(15, MSEC)\n            close_state = False\n            brain.timer.clear()\n\n        #plastic inspection\n        #if close_level is 2, if the doors are closed, and if it has been 2 seconds from when a marble was inspected\n        #dispense one marble, set close_state to False, and set timer to 0\n        if close_level == 2 and close_state == True and brain.timer.time(SECONDS) > 2:\n            marble_gate.spin_for(REVERSE, 90, DEGREES)\n            wait(15, MSEC)\n            close_state = False\n            brain.timer.clear()\n\n        #metal inspection\n        #if close_level is 3, if the doors are closed, and if it has been 2.2 seconds from when a marble was inspected\n        #dispense one marble, set close_state to False, and set timer to 0\n        if close_level == 3 and close_state == True and brain.timer.time(SECONDS) > 2.2:\n            marble_gate.spin_for(REVERSE, 90, DEGREES)\n            wait(15, MSEC)\n            close_state = False\n            brain.timer.clear()\n\n        #clear sorter\n        #statement that determines how a marble should be sorted based on its brightness, which is an indicator of what marble type it is\n        #if the brightness from the optical sensor is between 7.5 and 13, then the close_level is set to 1, the first door opens, close_state = True, and the doors close\n        if 7.5 < optical_sensor.brightness() < 12:\n            close_level = 1\n            door_one_clear.set_position(100 - 50.0, DEGREES)\n            wait(500, MSEC)\n            close_state = True\n            closing.broadcast()\n            \n        #plastic sorter\n        #if the brightness from the optical sensor is greater than or equal to 33, then the close_level is set to 2, the second door then first door opens, close_state = True, and the doors close\n        elif 33 <= optical_sensor.brightness():\n            close_level = 2\n            door_two_plastic.set_position(30 - 50.0, DEGREES)\n            wait(100, MSEC)\n            door_one_clear.set_position(100 - 50.0, DEGREES)\n            wait(540, MSEC)\n            close_state = True\n            closing.broadcast()\n            \n        #metal sorter\n        #if the brightness from the optical sensor is between or equal to 12 and 33, then the close_level is set to 3, the second and third doors open, then the first door opens, close_state = True, and the doors close\n        elif 12 <= optical_sensor.brightness() < 33:\n            close_level = 3\n            door_two_plastic.set_position(30 - 50.0, DEGREES)\n            door_three_metal.set_position(30 - 50.0, DEGREES)\n            wait(100, MSEC)\n            door_one_clear.set_position(100 - 50.0, DEGREES)\n            wait(1070, MSEC)\n            close_state = True\n            closing.broadcast()\n\n        #command for if there isn't a marble fed into the system for some reason\n        #wait for 5 seconds to pass, then set close_state to True, which essentially allows for marble_gate to turn\n        else:\n            # closing.broadcast()\n            if brain.timer.time(SECONDS) > 2.5:\n                close_state = True\n                stir_motor.spin(FORWARD, 9, VOLT)\n                wait(2, SECONDS)\n                stir_motor.stop()\n\n#closing event\n#all the servo doors close\ndef onevent_closing_0():\n    global myVariable, closing, close_state, close_level\n    door_one_clear.set_position(15 - 50.0, DEGREES)\n    door_two_plastic.set_position(100 - 50.0, DEGREES)\n    door_three_metal.set_position(100 - 50.0, DEGREES)\n    wait(.5, SECONDS)\n\n#system event handlers\nclosing(onevent_closing_0)\n#add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()","textLanguage":"python","rconfig":[{"port":[1],"name":"stir_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"optical_sensor","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[1],"name":"door_one_clear","customName":true,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[2],"name":"door_two_plastic","customName":true,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[3],"name":"door_three_metal","customName":true,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[3],"name":"marble_gate","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}